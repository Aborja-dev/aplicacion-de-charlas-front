---
import type { IMesage } from '../domain/domain';

interface Props {
    messages: IMesage[]
}
const { messages } = Astro.props;

// Format date to a more readable format
const formatMessageTime = (dateString: string) => {
    const options: Intl.DateTimeFormatOptions = { 
        hour: '2-digit',
        minute: '2-digit',
        day: '2-digit',
        month: 'short'
    };
    return new Date(dateString).toLocaleDateString('es-ES', options);
};
---

<div class="max-w-2xl p-6 bg-slate-600/20 backdrop-blur-sm rounded-xl shadow-md overflow-hidden">
    <h2 class="text-2xl font-bold text-yellow-400 mb-6">Mensajes</h2>
    
    <!-- Messages container -->
    <div class="space-y-4 max-h-[400px] overflow-y-auto pr-2 mb-6">
        {messages.map((message) => (
            <div class="flex flex-col">
                <div class="flex justify-between items-baseline mb-1">
                    <span class="font-medium text-yellow-300">{message.sender || 'Usuario'}</span>
                    <span class="text-xs text-gray-300">{formatMessageTime(message.createdAt)}</span>
                </div>
                <div class="bg-gray-800/70 backdrop-blur-sm border border-sky-700 p-4 rounded-lg text-white">
                    <p class="whitespace-pre-wrap">{message.content}</p>
                </div>
            </div>
        ))}
        {messages.length === 0 && (
            <p class="text-center text-gray-300 italic py-4">No hay mensajes aún. ¡Sé el primero en comentar!</p>
        )}
    </div>

    <!-- Message input form -->
    <form id="message-form" class="mt-4">
        <div class="flex gap-2">
            <input 
                type="text" 
                name="message" 
                placeholder="Escribe tu mensaje..." 
                class="flex-1 bg-gray-800/50 border-2 border-sky-700 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
                required
            />
            <button 
                type="submit" 
                class="bg-yellow-500 hover:bg-yellow-600 text-gray-900 font-medium px-4 py-2 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:ring-offset-2 focus:ring-offset-gray-900"
            >
                Enviar
            </button>
        </div>
    </form>
</div>

<style>
    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 6px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #3b82f6;
        border-radius: 3px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #2563eb;
    }
    
    /* Smooth scrolling */
    .overflow-y-auto {
        scroll-behavior: smooth;
    }
</style>

<script>
    import { sendMessageRequest } from "../lib/gateway";

    document.querySelector('#message-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target as HTMLFormElement;
        const formData = new FormData(form);
        const messageInput = form.querySelector('input[name="message"]') as HTMLInputElement;
        
        try {
            // Add your message sending logic here
            await sendMessageRequest(formData.get('message') as string);
            
            // Clear the input and keep focus
            messageInput.value = '';
            messageInput.focus();
            
            // Auto-scroll to the bottom of messages
            const messagesContainer = document.querySelector('.overflow-y-auto');
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        } catch (error) {
            console.error('Error sending message:', error);
            // You might want to show an error message to the user here
        }
    });
</script>